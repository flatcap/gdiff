Wed Dec  9 18:16:27 1998  AV
	* namei.c (do_unlink): handling of sticky bit went here.
	* {affs,ext2,minix,qnx4,sysv,ufs}/namei.c (*_unlink):
		removed handling of sticky bit.
	* qnx4/namei.c (qnx4_unlink):
		Yet another inode leak. Fixed.

Thu Dec 10 04:55:26 1998  AV
	* {ext2,minix,sysv,ufs}/namei.c (*_mknod):
		removed meaningless code handling attempts to mknod symlinks
		and directories. VFS protects us from _that_ and if this code
		would ever be called we'ld get a filesystem corruption.

Thu Dec 10 16:58:50 1998  AV
	* namei.c (do_rename): Fixed dentry leak that had been introduced by
		the first round of rmdir fixes.

Fri Dec 11 14:57:17 1998  AV
	* msdos/namei.c (msdos_rmdir): Fixed race in emptiness check.

Sat Dec 12 19:59:57 1998  AV
	* msdos/namei.c (msdos_mkdir): Fixed the evil breakage introduced by
		the changes of rmdir locking scheme. We shouldn't call
		msdos_rmdir from there.

Sun Dec 13 02:05:16 1998  AV
	* namei.c (do_unlink):
		Added new function: vfs_unlink, with the same arguments as
		->unlink() method.
	* kernel/ksyms.c: Made it exported.
	* include/linux/fs.h: Added prototype.
	* nfsd/vfs.c: Changed handling of unlink (switched to vfs_unlink)
	* {ext2,ufs}/namei.c (*_unlink): moved handling of imm./append-only to
		VFS.

Wed Dec 16 06:10:04 1998  AV
	* namei.c (may_create, may_delete): New inline functions.
		They check whether creation/deletion is permitted.
		Checks from other places of namei.c went there.
		Looks like originally I misread permission-related stuff
		both here and in nfsd. In particular, checks for
		immutable are done in permission(). D'oh.
	* unlink on directory should return -EISDIR, not -EPERM as it used to
		do. Fixed.
	* rmdir of immutable/append-only directory shouldn't be allowed. Fixed.

Remains unfixed:
	* UMSDOS_rename is broken. Call it with the dest. existing and being an
		empty directory and you've got EBUSY. At least it doesn't do
		any harm, so that will wait several days till rename cleanup.
		Sigh... It will wait a bit more. Problems with fat-derived
		filesystems are much worse than I thought. Idea of changing
		inode under dentry is broken by design - guess where the
		semaphore sits, for one.
	* umsdos: weird. rename() shouldn't return -EEXIST. BTW, manpage
		for rename(2) is obviously bogus - it mentions EEXIST and
		on the next line (correctly) says that EINVAL should be
		returned. Under the same conditions.
	* rename's handling of races is, erm, not optimal. Looks like I know
		what to do, but this thing needs some more cleanup - we can
		take care of almost all races in VFS and be much more graceful
		wrt locking. Moreover, it would give strong lookup atomicity.
		But it's a lot of changes to lookup and dcache code, so it will
		go after the fs drivers' cleanup.
	* hfs allows mknod. Only for regular files ;-/ IMHO it's bogus.
	* affs allows HARD links to directories. VFS is, to put it politely,
		not too ready to cope with _that_. And I'm not sure it should
		be - looks like they are pretty much similar to symlinks.
	* truncate doesn't give a damn about IO errors and disk overflows (on
		braindead filesystems). I've submitted a patch to Linus, but
		looks like it wasn't applied.
	* msdos: shouldn't we treat SYS as IMMUTABLE? Makes sense, IMHO.
	* minix, qnx and sysv do NOT allow to mkdir sticky directories.
	* {minix,sysv}/namei.c (do_{minix,syv}_{rename,unlink}):
		Stuff related to retries still needs cleanup/fixing.
		Looks like I've found an extremely low-probability race
		there...
